# -*- coding: utf-8 -*-
"""Time Series Analysis of Climatic Changes.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1jDydgyQvfpJfxcKig1ga4cZsCdF2acv2
"""

# Commented out IPython magic to ensure Python compatibility.
import pandas as pd
import numpy as np
import matplotlib.pyplot as plt
from google.colab import files
import seaborn as sns
import itertools

from scipy.linalg import LinAlgError
from scipy import stats
from scipy.stats import gaussian_kde, norm

import statsmodels.api as sm
from statsmodels.tsa.stattools import adfuller, acf, pacf
from statsmodels.graphics.tsaplots import plot_acf, plot_pacf
from statsmodels.graphics.gofplots import qqplot
from statsmodels.tsa.statespace.sarimax import SARIMAX

from sklearn.metrics import mean_squared_error
from math import sqrt
import warnings
warnings.filterwarnings("ignore")

# %matplotlib inline

uploaded=files.upload()

temp=pd.read_csv('GlobalLandTemperaturesByCountry.csv')
temp.head()

temp.tail()

print(temp.columns)

temp.dtypes

temp=pd.read_csv('GlobalLandTemperaturesByCountry.csv',parse_dates=['dt'])
temp

countries=temp['Country'].unique()
print(countries)

country_list = ['Canada', 'Brazil', 'Congo', 'India', 'United Kingdom', 'United States', 'Swaziland', 'Italy', 'Europe', 'France', 'Japan', 'Russia']
temp['Year'] = temp['dt'].dt.year
temp['Month'] = temp['dt'].dt.month
temp=temp.set_index('dt')

temp_country=temp[temp['Country'].isin(country_list)]
temp_copy = temp_country.copy()
temp_copy.fillna(method='ffill', inplace=True)
temp_copy

temp_copy['AverageTemperature'].plot(figsize=(15,10))

#Augmented dickey fuller test for stationarity check

t=temp_copy['AverageTemperature'].values
fuller_test= adfuller(t)
fuller_out=pd.Series(fuller_test[0:4],index=['Test Stats','p-value','Lags used','No. of observations used'])
print(fuller_out)
for key,value in fuller_test[4].items():
  print('\t%s: %.3f' %(key,value))

if fuller_test[0]<fuller_test[4]['5%']:
  print('Reject H0 - Time series is stationary')
else:
  print('Failed to Reject H0 - Time series is not stationary')

temp_copy.describe()

df=pd.pivot_table(temp_copy,index='Year', columns='Country',values='AverageTemperature',aggfunc='mean')
df

df.plot()
plt.title('Average temperatures of few countries')
plt.rcParams["figure.figsize"] = (20,12)
plt.legend(bbox_to_anchor =(1, 0.5))

ax = df[-10:].T.plot(kind='bar', ylabel='AverageTemperature')
plt.title('Variation in average temperature of countries in last 10 years')
plt.rcParams["figure.figsize"] = (12,8)
plt.legend(bbox_to_anchor=(1,0.5))

countries=pd.read_csv('GlobalLandTemperaturesByCountry.csv',parse_dates=['dt'])
india=temp_copy.loc[temp_copy['Country']=='India',['Year','AverageTemperature']]
india.columns=['year','AvgTemp']
india=india.groupby(pd.Grouper(freq='Y')).mean()
india['year']=india.index.year
india

from statsmodels.tsa.stattools import adfuller
from numpy import log

t=india['AvgTemp'].values
fuller_test= adfuller(t)
fuller_out=pd.Series(fuller_test[0:4],index=['Test Stats','p-value','Lags used','No. of observations used'])
print(fuller_out)
for key,value in fuller_test[4].items():
  print('\t%s: %.3f' %(key,value))

if fuller_test[0]<fuller_test[4]['5%']:
  print('Reject H0 - Time series is stationary')
else:
  print('Failed to Reject H0 - Time series is not stationary')

#Rolling Statistics test for India temerature
test=pd.DataFrame()
test['year']=india['year']
test['AvgTemp']=india['AvgTemp']
test=test.set_index('year')
print(test)
rollmean=test.rolling(window=12).mean()
rollstd=test.rolling(window=12).std()
print(rollmean,'\n', rollstd)

original=plt.plot(test,color='red',label='Original')
mean=plt.plot(rollmean,color='blue',label='Mean')
std=plt.plot(rollstd,color='green',label='Variance')
plt.rcParams["figure.figsize"]=(10,6)
plt.legend(loc='best')
plt.title('Rolling Statistics Test for Stationarity')
plt.show()

year_avg = pd.pivot_table(india, values='AvgTemp', index='year', aggfunc='mean')
year_avg['10 Years MA'] = year_avg['AvgTemp'].rolling(10).mean()
year_avg[['AvgTemp','10 Years MA']].plot(figsize=(20,6))
plt.title('The trend in dataset')
plt.xlabel('Years')
plt.ylabel('Temperature')
plt.xticks([x for x in range(1900,2012,3)])
plt.show()

!pip install pmdarima

from pmdarima import auto_arima
stepwise_fit = auto_arima(temp_copy['AverageTemperature'], trace=True,suppress_warnings=True)

from pmdarima import auto_arima
stepwise_fit_india = auto_arima(test, trace=True,suppress_warnings=True)

print(temp_copy.shape)
train1=temp_copy.iloc[:-30]
test1=temp_copy.iloc[-30:]
print(train1.shape,test1.shape)

print(test.shape)
train2=test.iloc[:-30]
test2=test.iloc[-30:]
print(train2.shape,test2.shape)

test1=test1.set_index('Year')
test1

train1=train1.set_index('Year')
train1

from statsmodels.tsa.arima_model import ARIMA
model1=ARIMA(train1['AverageTemperature'],order=(5,1,2))
model1=model1.fit()
model1.summary()

train2

#from pandas._libs.algos import take_2d_axis1_int32_int32
#test2=take_2d_axis1_int32_int32.set_index('Year')
test2

from statsmodels.tsa.arima_model import ARIMA
model2=ARIMA(train2['AvgTemp'],order=(0,1,0))
model2=model2.fit()
model2.summary()

pred2=model2.predict(typ='levels').rename('ARIMA Predictions')
pred2.plot(legend=True)
test['AvgTemp'].plot(legend=True)

pred2

train2

from sklearn.metrics import mean_squared_error
from math import sqrt

print(train2['AvgTemp'].mean())
rmse=sqrt(mean_squared_error(pred2,train2[1:]))
print(rmse)

from statsmodels.tsa.arima_model import ARIMA
model2=ARIMA(test2['AvgTemp'],order=(0,1,0))
model2=model2.fit()
model2.summary()

pred3=model2.predict(typ='levels').rename('ARIMA Predictions')
pred3.plot(legend=True)
test['AvgTemp'].plot(legend=True)

pred3

from sklearn.metrics import mean_squared_error
from math import sqrt

print(test2['AvgTemp'].mean())
rmse=sqrt(mean_squared_error(pred3,test2[1:]))
print(rmse)

index_future_dates=pd.date_range(start='2016-12-30',end='2017-01-27')
#print(index_future_dates)
pred=model2.predict(typ='levels').rename('Future ARIMA Predictions')
#print(comp_pred)
pred.index=index_future_dates
print(pred)